name: CI

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  unit-retrieval:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install uv
        run: curl -LsSf https://astral.sh/uv/install.sh | sh

      - name: Add uv to PATH
        shell: bash
        run: echo "$HOME/.local/bin" >> "$GITHUB_PATH"

      - name: Sync deps
        run: uv sync

      - name: Run retrieval test (offline)
        run: uv run python -m tests.test_retrieval

  local-endpoints:
    runs-on: ubuntu-latest
    needs: unit-retrieval
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install uv
        run: curl -LsSf https://astral.sh/uv/install.sh | sh

      - name: Add uv to PATH
        shell: bash
        run: echo "$HOME/.local/bin" >> "$GITHUB_PATH"

      - name: Sync deps
        run: uv sync

      - name: Create .env (dummy creds OK for local test)
        run: |
          cat > .env <<'ENV'
          CLIENT_ID=dummy
          CLIENT_SECRET=dummy
          TENANT_ID=consumers
          REDIRECT_URI=http://localhost:8000/auth/callback
          OPENAI_API_KEY=dummy
          WEBHOOK_URL=
          HOST=0.0.0.0
          PORT=8000
          DEBUG=true
          ENV

      - name: Start app
        run: |
          uv run python main.py > app.log 2>&1 &
          for i in {1..30}; do
            curl -fsS http://localhost:8000/health && break
            sleep 1
          done
          tail -n +1 app.log || true

      - name: Run local tests
        run: uv run python -m tests.test_local

  ngrok:
    runs-on: ubuntu-latest
    needs: local-endpoints
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install uv + jq + ngrok
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.local/bin" >> "$GITHUB_PATH"
          sudo apt-get update && sudo apt-get install -y jq
          curl -sSL https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-amd64.tgz | sudo tar -xz -C /usr/local/bin

      - name: Sync deps
        run: uv sync

      - name: Create .env (dummy creds OK)
        run: |
          cat > .env <<'ENV'
          CLIENT_ID=dummy
          CLIENT_SECRET=dummy
          TENANT_ID=consumers
          REDIRECT_URI=http://localhost:8000/auth/callback
          OPENAI_API_KEY=dummy
          WEBHOOK_URL=
          HOST=0.0.0.0
          PORT=8000
          DEBUG=true
          ENV

      - name: Start app
        run: |
          uv run python main.py > app.log 2>&1 &
          for i in {1..30}; do
            curl -fsS http://localhost:8000/health && break
            sleep 1
          done

      - name: Configure ngrok
        env:
          NGROK_AUTHTOKEN: ${{ secrets.NGROK_AUTHTOKEN }}
        run: ngrok config add-authtoken "$NGROK_AUTHTOKEN"

      - name: Start ngrok and capture URL
        run: |
          ngrok http 8000 > /dev/null 2>&1 &
          sleep 3
          PUB_URL=$(curl -s http://127.0.0.1:4040/api/tunnels | jq -r '.tunnels[] | select(.proto=="https") | .public_url' | head -n1)
          echo "PUB_URL=$PUB_URL" >> $GITHUB_ENV
          test -n "$PUB_URL"

      - name: Run ngrok test
        run: uv run python -m tests.test_ngrok "${{ env.PUB_URL }}"

  e2e:
    runs-on: ubuntu-latest
    needs: ngrok
    env:
      CLIENT_ID: ${{ secrets.CLIENT_ID }}
      CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
      TENANT_ID: ${{ secrets.TENANT_ID }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      MS_USERNAME: ${{ secrets.MS_USERNAME }}      # cloud-only test mailbox
      MS_PASSWORD: ${{ secrets.MS_PASSWORD }}      # for ROPC; enable Public client flows
      NGROK_AUTHTOKEN: ${{ secrets.NGROK_AUTHTOKEN }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install uv + jq + ngrok + msal
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.local/bin" >> "$GITHUB_PATH"
          sudo apt-get update && sudo apt-get install -y jq
          curl -sSL https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-amd64.tgz | sudo tar -xz -C /usr/local/bin

      - name: Sync deps
        run: uv sync

      - name: Create .env
        run: |
          cat > .env <<'ENV'
          CLIENT_ID=${{ env.CLIENT_ID }}
          CLIENT_SECRET=${{ env.CLIENT_SECRET }}
          TENANT_ID=${{ env.TENANT_ID }}
          REDIRECT_URI=http://localhost:8000/auth/callback
          OPENAI_API_KEY=${{ env.OPENAI_API_KEY }}
          WEBHOOK_URL=
          HOST=0.0.0.0
          PORT=8000
          DEBUG=true
          ENV

      - name: Prepare token cache via ROPC (test mailbox)
        run: |
          uv run python - <<'PY'
          import os, json, msal
          client_id = os.environ["CLIENT_ID"]
          tenant = os.environ["TENANT_ID"]
          username = os.environ["MS_USERNAME"]
          password = os.environ["MS_PASSWORD"]
          authority = f"https://login.microsoftonline.com/{tenant}"
          scopes = ["User.Read","Mail.Read","Mail.ReadWrite","Mail.Send"]
          app = msal.PublicClientApplication(client_id=client_id, authority=authority)
          result = app.acquire_token_by_username_password(username=username, password=password, scopes=scopes)
          if "access_token" not in result:
              raise SystemExit("ROPC failed: " + json.dumps(result))
          cache = app.token_cache
          if cache.has_state_changed:
              open("token_cache.json","w").write(cache.serialize())
          print("Token cache written")
          PY

      - name: Start app
        run: |
          uv run python main.py > app.log 2>&1 &
          for i in {1..30}; do
            curl -fsS http://localhost:8000/health && break
            sleep 1
          done

      - name: Configure ngrok
        run: ngrok config add-authtoken "$NGROK_AUTHTOKEN"

      - name: Run E2E
        run: uv run python -m tests.test_e2e